package GenerateRule;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.lang.model.element.Modifier;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;
import com.squareup.javapoet.TypeSpec.Builder;

import kodkod.ast.Formula;
import kodkod.ast.Relation;

/**
 * Generate rule class
 **/
public class GenerateRuleClass {
	static void exetute(String factName, List<String> sigs, List<String> fields, List<String> vars,
			List<String> formulas, String path) throws Exception {

		File destinationFolder; // where Model is written to
		destinationFolder = new File(path);

		Builder classBuilder = TypeSpec.classBuilder("Rule4" + factName).addModifiers(Modifier.PUBLIC)
				.superclass(ClassName.get("controller", "Rule"));
		// List sig in this rule
		TypeName mapOfStringAndClassOfAny = ParameterizedTypeName.get(ClassName.get(List.class),
				ClassName.get(String.class));
		FieldSpec fieldGameOb = FieldSpec.builder(mapOfStringAndClassOfAny, "listGameObjectName")
				.addModifiers(Modifier.PRIVATE).build();
		classBuilder.addField(fieldGameOb);
		// property sig
		for (String s : sigs) {
			FieldSpec field = FieldSpec.builder(Relation.class, s, Modifier.PRIVATE).build();
			classBuilder.addField(field);
			// Getter
			MethodSpec sigGetter = MethodSpec.methodBuilder("get" + UpperCaseCharFirst(s)).addModifiers(Modifier.PUBLIC)
					.returns(Relation.class).addStatement("return this.$N", s).build();
			classBuilder.addMethod(sigGetter);
			// Setter
			MethodSpec sigSetter = MethodSpec.methodBuilder("set" + UpperCaseCharFirst(s)).addModifiers(Modifier.PUBLIC)
					.addParameter(Relation.class, s.toLowerCase()).addStatement("this.$N = $N", s, s.toLowerCase())
					.build();
			classBuilder.addMethod(sigSetter);
		}

		// property field
		for (String field : fields) {
			FieldSpec f = FieldSpec.builder(Relation.class, field, Modifier.PRIVATE).build();
			classBuilder.addField(f);
			// Getter
			MethodSpec fieldGetter = MethodSpec.methodBuilder("get" + UpperCaseCharFirst(field))
					.addModifiers(Modifier.PUBLIC).returns(Relation.class).addStatement("return this.$N", field)
					.build();
			classBuilder.addMethod(fieldGetter);
			// Setter
			MethodSpec fieldSetter = MethodSpec.methodBuilder("set" + UpperCaseCharFirst(field))
					.addModifiers(Modifier.PUBLIC).addParameter(Relation.class, field.toLowerCase())
					.addStatement("this.$N = $N", field, field.toLowerCase()).build();
			classBuilder.addMethod(fieldSetter);
		}

		// constructor empty
		MethodSpec.Builder Constructor = MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC);
		// constructor whit parameters
		MethodSpec.Builder ConstructorPara = MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC);
		// override method addGameObject
		MethodSpec.Builder overrideAddGameObject = MethodSpec.methodBuilder("addGameObject")
				.addModifiers(Modifier.PUBLIC).returns(TypeName.VOID)
				.addParameter(ClassName.get("Controller", "GameObject"), "gameObject").addCode(
						"if(gameObject != null){\nif(!gameObjects.contains(gameObject)){\ngameObjects.add(gameObject);\n}}\n");
		for (String s : sigs) {
			Constructor.addStatement("this.$N = Relation.unary(\"$N\")", s, s);
			ConstructorPara.addParameter(Relation.class, s.toLowerCase()).addStatement("this.$N = $N", s,
					s.toLowerCase());
		}
		// initial listGameObjectName
		for (String s : sigs) {
			Constructor.addStatement("listGameObjectName.Add(\"$N\")", s);
			ConstructorPara.addStatement("listGameObjectName.Add(\"$N\")", s);
		}

		for (String f : fields) {
			Constructor.addStatement("this.$N = Relation.unary(\"$N\")", f, f);
			ConstructorPara.addParameter(Relation.class, f.toLowerCase()).addStatement("this.$N = $N", f,
					f.toLowerCase());
		}
		// method execute
		ClassName variableKodKod = ClassName.get("kodkod.ast","Variable");
		TypeVariableName typeVariableName = TypeVariableName.get("T",variableKodKod);
		MethodSpec.Builder execute = MethodSpec.methodBuilder("execute").addModifiers(Modifier.PUBLIC)
				.returns(Formula.class).addTypeVariable(typeVariableName.withBounds(variableKodKod));
		// variable in fact
		for (String v : vars) {
			execute.addStatement("private Variable $N = Variable.unary(\"$N\")", v, v);
		}
		// variable formula
		int count = -1;

		for (int i = formulas.size() - 1; i >= 0; i--) {
			if (count == -1) {
				count++;
				execute.addStatement("private Formula $N = $N", "f" + count, formulas.get(i));
			} else {
				if (formulas.get(i).contains("forAll") || formulas.get(i).contains("forSome")) {
					if (formulas.get(i).substring(0, 3).equals("for")) {
						execute.addStatement("private Formula $N = $N.$N", "f" + (count + 1), "f" + (count),
								formulas.get(i));
						count++;
					} else {
						execute.addStatement("private Formula $N = $N.and($N)", "f" + (count + 1), "f" + (count),
								formulas.get(i));
						count++;
					}
				} else {
					execute.addStatement("private Formula $N = $N.and($N)", "f" + (count + 1), "f" + (count),
							formulas.get(i));
					count++;
				}
			}
		}
		execute.returns(Formula.class).addStatement("return $N", "f" + count);
		classBuilder.addMethod(Constructor.build()).addMethod(ConstructorPara.build()).addMethod(execute.build())
				.addMethod(overrideAddGameObject.build());
		JavaFile javaFile = JavaFile.builder("Controller", classBuilder.build()).build();

		try {
			javaFile.writeTo(destinationFolder);
			/*
			 * Comment the above line, use the following line to print all the
			 * class to console
			 */
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			// assertMessage(e1.toString());
		}
	}

	private static String UpperCaseCharFirst(String str) {
		String newStr = Character.toString(str.charAt(0)).toUpperCase() + str.substring(1);
		return newStr;
	}
}
